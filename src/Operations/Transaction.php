<?php

declare(strict_types=1);

namespace Effectra\SqlQuery\Operations;

use Effectra\SqlQuery\Attribute;
use Effectra\SqlQuery\Build\BuildAction;
use Effectra\SqlQuery\Build\RunBuilder;

/**
 * Class Transaction
 *
 * This class represents an SQL transaction operation for managing database transactions.
 *
 */
class Transaction extends Attribute
{
    /**
     * Constant representing a "commit" operation in a transaction.
     */
    const COMMIT = 'commit';

    /**
     * Constant representing a "rollback" operation in a transaction.
     */
    const ROLLBACK = 'rollback';

     /**
     * Begin a new database transaction.
     */
    public function begin(): void
    {
        $this->addToAttribute('transaction', 'begin');
    }

    /**
     * Record a series of queries to be executed within the transaction.
     *
     * @param array $queries An array of queries to record.
     */
    public function record(array $queries): void
    {
        $this->addToAttribute('transaction', 'record');
        $this->setAttribute('records', $queries);
    }

    /**
     * Commit the current transaction.
     */
    public function commit(): void
    {
        $this->addToAttribute('transaction', 'commit');
    }

    /**
     * Rollback the current transaction.
     */
    public function rollback(): void
    {
        $this->addToAttribute('transaction', 'rollback');
    }

    /**
     * Specify an operation to execute if the transaction is successful.
     *
     * @param mixed $operation The operation to execute if the transaction is successful.
     */
    public function ifSuccessful($operation): void
    {
        $this->setAttribute('cond_start', true);
        $this->addToAttribute('cond', 'if_success');
        $this->addToAttribute('operation_success', $operation);
    }

     /**
     * Specify an operation to execute if the transaction fails.
     *
     * @param mixed $operation The operation to execute if the transaction fails.
     */
    public function ifFailed($operation): void
    {
        $this->setAttribute('cond_start', false);
        $this->addToAttribute('cond', 'if_failed');
        $this->addToAttribute('operation_failed', $operation);
    }

     /**
     * Get the SQL query generated by the Transaction operation.
     *
     * @return string
     */
    public function getQuery(): string
    {
        return (string) new RunBuilder($this->getAttributes(), BuildAction::TRANSACTION);
    }

    /**
     * Convert the Transaction operation to a string, returning the generated SQL query.
     *
     * @return string
     */
    public function __toString(): string
    {
        return $this->getQuery();
    }
}
