<?php

declare(strict_types=1);

namespace Effectra\SqlQuery\Operations;

use Effectra\SqlQuery\Attribute;
use Effectra\SqlQuery\Build\BuildAction;
use Effectra\SqlQuery\Build\RunBuilder;
use Effectra\SqlQuery\Validation\ArraysValidation;

/**
 * Class Insert
 *
 * This class represents an SQL "INSERT" operation for inserting data into a database table.
 *
 */
class Insert extends Attribute
{

    public const INSERT_VALUES = 1;
    public const INSERT_DATA = 2;

    public const INSERT_VALUES_MODE_NORMAL = 3;
    public const INSERT_VALUES_MODE_SAFE = 4;

    use ArraysValidation, SetDataTrait;

    /**
     * Constructor for the Insert class.
     *
     * @param string $table The name of the table where data will be inserted.
     * @param int $insert_type The type of insert operation (INSERT_VALUES or INSERT_DATA).
     */
    public function __construct(string $table, int $insert_type = self::INSERT_VALUES)
    {
        $this->setAttribute('operation', 'insert');
        $this->setAttribute('table_name', $table);
        $this->setAttribute('insert_type', $insert_type);
        $this->setAttribute('insert_data_mode', self::INSERT_VALUES_MODE_NORMAL);
    }

    /**
     * Get the SQL query generated by the Insert operation.
     *
     * @return string
     */
    public function getQuery(): string
    {
        if(empty($this->getAttribute('columns') )){
            throw new \Exception("Error Processing Query, no data inserted");
        }
        if(empty($this->getAttribute('values') )){
            $this->setAttribute('values',array_map(fn($col) => "?" ,$this->getAttribute('columns')));
        }
        return (string) new RunBuilder($this->getAttributes(), BuildAction::INSERT);
    }

    /**
     * Convert the Insert operation to a string, returning the generated SQL query.
     *
     * @return string
     */
    public function __toString(): string
    {
        return $this->getQuery();
    }
}
