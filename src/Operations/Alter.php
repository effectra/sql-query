<?php

declare(strict_types=1);

namespace Effectra\SqlQuery\Operations;

use Effectra\SqlQuery\Attribute;
use Effectra\SqlQuery\Build\BuildAction;
use Effectra\SqlQuery\Build\RunBuilder;
use Effectra\SqlQuery\Structure\Column;
use Effectra\SqlQuery\Validation\ArraysValidation;

/**
 * Class Alter
 *
 * This class represents an SQL "ALTER" operation, which is used to modify database structures.
 *
 */
class Alter extends Attribute
{
    use ArraysValidation, OperationsTrait;

    /**
     * Constructor for the Alter class.
     */
    public function __construct()
    {
        $this->setAttribute('target', 'table');
    }

    /**
     * Create a new Column instance for the specified column.
     *
     * @param string $column The name of the column.
     * @param callable|array $definitions The column definitions.
     *
     * @return Column
     */
    public function callColumnClass(string $column,callable|array $definitions):Column
    {
        $col = new Column($column,false);
        if(is_callable($definitions)){
            call_user_func($definitions,$col);
        }
        if(is_array($definitions)){
            $col->setAttributes($definitions);
        }
        return $col;
    }

    /**
     * Set the target of the operation to a specific database.
     *
     * @param mixed $name The name of the database.
     *
     * @return self
     */
    public function database( $name): self
    {
        $this->setAttribute('target', 'database');
        $this->setAttribute('database', $name);
        return $this;
    }

     /**
     * Set the target of the operation to a specific table.
     *
     * @param mixed $name The name of the table.
     *
     * @return self
     */
    public function table( $name): self
    {
        $this->setAttribute('target', 'table');
        $this->setAttribute('table_name', $name);
        return $this;
    }

    /**
     * Set the target column for the operation.
     *
     * @param mixed $name The name of the column.
     *
     * @return self
     */
    public function column( $name): self
    {
        $this->setAttribute('column', $name);
        return $this;
    }

    /**
     * Rename the database.
     *
     * @param mixed $new_name The new name for the database.
     *
     * @return self
     */
    public function renameDatabase($new_name)
    {
        $this->setAttribute('rename', [
            'db_name' => $new_name
        ]);
        return $this;
    }

    /**
     * Rename the table.
     *
     * @param mixed $new_name The new name for the table.
     *
     * @return self
     */
    public function renameTable($new_name)
    {
        $this->setAttribute('rename', [
            'table_name' => $new_name
        ]);
        return $this;
    }
    
    /**
     * Rename the column.
     *
     * @param mixed $new_name The new name for the column.
     *
     * @return self
     */
    public function renameColumn($new_name)
    {
        $this->setAttribute('rename', [
            'column_name' => $new_name
        ]);
        return $this;
    }
    
     /**
     * Modify a column with the specified changes.
     *
     * @param string $column The name of the column to modify.
     * @param callable|array $changes The column changes.
     *
     * @return self
     */
    public function modifyColumn(string $column,callable|array $changes)
    {
        $changesColumn = $this->callColumnClass($column,$changes);
        $this->setAttribute('modify', [
            'column' => $changesColumn->getAttributes()
        ]);
        return $this;
    }

    /**
     * Add a new column with the specified changes.
     *
     * @param string $column The name of the new column.
     * @param callable|array $changes The new column definitions.
     *
     * @return self
     */
    public function addColumn(string $column,callable|array $changes)
    {
        $changesColumn = $this->callColumnClass($column,$changes);
        $this->setAttribute('add', [
            'column' => $changesColumn->getAttributes()
        ]);
        return $this;
    }

    /**
     * Get the SQL query generated by the Alter operation.
     *
     * @return string
     */
    public function getQuery(): string
    {
        return (string) new RunBuilder($this->getAttributes(), BuildAction::ALTER);
    }

    /**
     * Convert the Alter operation to a string, returning the generated SQL query.
     *
     * @return string
     */
    public function __toString(): string
    {
        return $this->getQuery();
    }

}