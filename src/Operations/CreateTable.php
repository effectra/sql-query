<?php

declare(strict_types=1);

namespace Effectra\SqlQuery\Operations;

use Effectra\SqlQuery\Attribute;
use Effectra\SqlQuery\Build\BuildAction;
use Effectra\SqlQuery\Build\RunBuilder;
use Effectra\SqlQuery\Table;
use Effectra\SqlQuery\Syntax;
use Effectra\SqlQuery\Validation\ArraysValidation;

/**
 * Class CreateTable
 *
 * This class represents an SQL "CREATE TABLE" operation for creating database tables.
 *
 */
class CreateTable extends Attribute
{
    use ArraysValidation, OperationsTrait;

    /**
     * Constructor for the CreateTable class.
     *
     * @param string $table_name The name of the table to be created.
     * @param mixed $table The table definition callback or configuration.
     */
    public function __construct(protected string $table_name, protected  $table)
    {
        $this->setAttribute('operation', 'create_table');
        $this->setAttribute('table_name', $table_name);
        $this->setAttribute('cols', $this->getTableConstructs());
    }

    /**
     * Set the storage engine for the new table.
     *
     * @param string $engine The storage engine to use.
     *
     * @return self
     */
    public function engine(string $engine): self
    {
        $this->setAttribute('engine', $engine);
        return $this;
    }

    /**
     * Set the character set for the new table.
     *
     * @param string $charset The character set to use.
     *
     * @return self
     */
    public function charset(string $charset): self
    {
        $this->setAttribute('charset', $charset);
        return $this;
    }

    /**
     * Specify whether the table should only be created if it does not already exist.
     *
     * @param bool $act Whether to create the table only if it doesn't exist.
     *
     * @return self
     */
    public function exists(bool $act = false): self
    {
        $this->setAttribute('exists', $act);
        return $this;
    }

    /**
     * Get the table constructs based on the provided table definition callback or configuration.
     *
     * @return array
     */
    public function getTableConstructs(): array
    {
        $table = new Table(new Syntax());
        call_user_func($this->table, $table);
        if(empty($table->getAttribute('cols'))){
            throw new \Exception("Error Processing Query, No columns defined");
        }
        return array_values($table->getAttribute('cols'));
    }

    /**
     * Get the SQL query generated by the CreateTable operation.
     *
     * @return string
     */
    public function getQuery(): string
    {
        return (string) new RunBuilder($this->getAttributes(), BuildAction::TABLE);
    }

    /**
     * Convert the CreateTable operation to a string, returning the generated SQL query.
     *
     * @return string
     */
    public function __toString(): string
    {
        return $this->getQuery();
    }
}
