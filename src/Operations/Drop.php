<?php

declare(strict_types=1);

namespace Effectra\SqlQuery\Operations;

use Effectra\SqlQuery\Attribute;
use Effectra\SqlQuery\Build\BuildAction;
use Effectra\SqlQuery\Build\RunBuilder;
use Effectra\SqlQuery\Validation\ArraysValidation;

/**
 * Class Drop
 *
 * This class represents an SQL "DROP" operation for dropping databases, tables, columns, keys, indexes, etc.
 *
 */
class Drop extends Attribute
{
    use ArraysValidation, OperationsTrait;

    /**
     * Constructor for the Drop class.
     */
    public function __construct()
    {
        $this->setAttribute('operation', 'drop');
    }

    /**
     * Set the target database to be dropped.
     *
     * @param mixed $name The name of the database to drop.
     *
     * @return self
     */
    public function database($name): self
    {
        $this->setAttribute('database', $name);
        return $this;
    }

    /**
     * Set the target table to be dropped.
     *
     * @param mixed $tableName The name of the table to drop.
     *
     * @return self
     */
    public function table($tableName): self
    {
        $this->setAttribute('table', $tableName);
        return $this;
    }

    /**
     * Set the target column to be dropped.
     *
     * @param mixed $name The name of the column to drop.
     *
     * @return self
     */
    public function column($name): self
    {
        $this->setAttribute('column', $name);
        return $this;
    }

    /**
     * Set the target key to be dropped.
     *
     * @param mixed $name The name of the key to drop.
     *
     * @return self
     */
    public function key($name): self
    {
        $this->setAttribute('key', $name);
        return $this;
    }

    /**
     * Set the target index to be dropped.
     *
     * @param mixed $name The name of the index to drop.
     *
     * @return self
     */
    public function index($name): self
    {
        $this->setAttribute('index', $name);
        return $this;
    }

    /**
     * Set the target to drop a database.
     */
    public function dropDatabase(): self
    {
        $this->setAttribute('target', 'database');
        return $this;
    }

    /**
     * Set the target to drop a table.
     */
    public function dropTable(): self
    {
        $this->setAttribute('target', 'table');
        return $this;
    }

    /**
     * Set the target to drop a column.
     */
    public function dropColumn(): self
    {
        $this->setAttribute('target', 'column');
        return $this;
    }

    /**
     * Set the target to drop a key.
     */
    public function dropKey(): self
    {
        $this->setAttribute('target', 'key');
        return $this;
    }

    /**
     * Set the target to drop a primary key.
     */
    public function dropPrimaryKey(): self
    {
        $this->dropKey();
        $this->setAttribute('type', 'primary_key');
        return $this;
    }

    /**
     * Set the target to drop a foreign key.
     */
    public function dropForeignKey(): self
    {
        $this->dropKey();
        $this->setAttribute('type', 'foreign_key');
        return $this;
    }

    /**
     * Set the target to drop a unique key.
     */
    public function dropUniqueKey(): self
    {
        $this->dropIndex();
        $this->setAttribute('type', 'unique_key');
        return $this;
    }

    /**
     * Set the target to drop an index.
     */
    public function dropIndex(): self
    {
        $this->setAttribute('target', 'index');
        return $this;
    }

    /**
     * Get the SQL query generated by the Drop operation.
     *
     * @return string
     */
    public function getQuery(): string
    {
        return (string) new RunBuilder($this->getAttributes(), BuildAction::DROP);
    }

    /**
     * Convert the Drop operation to a string, returning the generated SQL query.
     *
     * @return string
     */
    public function __toString(): string
    {
        return $this->getQuery();
    }
}
